{"ast":null,"code":"var _jsxFileName = \"/Users/simonastamkevicius/Desktop/Python Function Visualization/frontend/cartesian-frontend/src/components/VisualizationContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisualizationContainer = () => {\n  _s();\n  const [points, setPoints] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [scale, setScale] = useState(60);\n  const [colour, setColour] = useState(\"#002fa7\");\n  const [maxX, setMaxX] = useState(0);\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0,\n    z: 0\n  });\n  const width = 500;\n  const height = 500;\n  useEffect(() => {\n    axios.get('http://localhost:8000/points').then(response => {\n      setPoints(response.data.points);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching points:', error);\n      setError('Failed to fetch points');\n      setLoading(false);\n    });\n  }, []);\n  const rotatePoint = (point, type) => {\n    const [x, y, z] = point;\n    let rotatedX = x;\n    let rotatedY = y;\n    let rotatedZ = z;\n    const sin = Math.sin;\n    const cos = Math.cos;\n    if (type === 'x') {\n      // Rotate around X axis\n      rotatedY = y * cos(rotation.x) - z * sin(rotation.x);\n      rotatedZ = y * sin(rotation.x) + z * cos(rotation.x);\n    } else if (type === 'y') {\n      // Rotate around Y axis\n      rotatedX = x * cos(rotation.y) + z * sin(rotation.y);\n      rotatedZ = -x * sin(rotation.y) + z * cos(rotation.y);\n    } else if (type === 'z') {\n      // Rotate around Z axis\n      rotatedX = x * cos(rotation.z) - y * sin(rotation.z);\n      rotatedY = x * sin(rotation.z) + y * cos(rotation.z);\n    }\n    return [rotatedX, rotatedY, rotatedZ];\n  };\n  const handleClick = e => {\n    if (points.length > 0) {\n      const typeOfRot = e.target.value;\n\n      // Update the rotation angle based on the clicked axis\n      setRotation(prev => ({\n        ...prev,\n        [typeOfRot]: prev[typeOfRot] + Math.PI / 6 // Rotate by 30 degrees each time\n      }));\n\n      // Rotate points and update the state\n      const rotatedPoints = points.map(point => rotatePoint(point, typeOfRot));\n      setPoints(rotatedPoints);\n\n      // Send the rotated points to the server if needed\n      axios.post('http://localhost:8000/rotate_points', {\n        type: typeOfRot,\n        newPoints: rotatedPoints\n      }).then(response => {\n        if (response.status === 200) {\n          setPoints(response.data.rotatedPoints);\n        } else {\n          throw new Error('Failed to rotate points!');\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    }\n  };\n  const handleWheel = e => {\n    const {\n      deltaY\n    } = e;\n    const newScale = deltaY > 0 ? scale - 0.075 * Math.abs(deltaY) : scale + 0.075 * Math.abs(deltaY);\n    if (newScale > 1) {\n      setScale(newScale);\n    } else {\n      setScale(1);\n    }\n  };\n  const safeRadius = (z, scale, cameraPos) => {\n    const denominator = 1 + z * scale / cameraPos;\n    if (denominator <= 0.1) {\n      return 0;\n    }\n    return 1.5 * (1 / denominator);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 21\n  }, this);\n  const drawAxisLine = axisType => {\n    const sinX = Math.sin(rotation.x);\n    const cosX = Math.cos(rotation.x);\n    const sinY = Math.sin(rotation.y);\n    const cosY = Math.cos(rotation.y);\n    const sinZ = Math.sin(rotation.z);\n    const cosZ = Math.cos(rotation.z);\n    if (axisType === 'x') {\n      const startX = -3.5;\n      const endX = 3.5;\n      const yPos = 0;\n      const zPos = 500;\n      const projectedStartX = startX * scale * zPos / (zPos + startX * scale) + width / 2;\n      const projectedEndX = endX * scale * zPos / (zPos + endX * scale) + width / 2;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: projectedStartX,\n        y1: yPos + height / 2,\n        x2: projectedEndX,\n        y2: yPos + height / 2,\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this);\n    }\n    if (axisType === 'y') {\n      const startY = -3.5;\n      const endY = 3.5;\n      const xPos = 0;\n      const zPos = 500;\n      const projectedStartY = startY * scale * zPos / (zPos + startY * scale) + height / 2;\n      const projectedEndY = endY * scale * zPos / (zPos + endY * scale) + height / 2;\n      return /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: xPos + width / 2,\n        y1: projectedStartY,\n        x2: xPos + width / 2,\n        y2: projectedEndY,\n        stroke: \"black\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onWheel: handleWheel,\n    style: {\n      overflow: 'hidden'\n    },\n    options: {\n      passive: false\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"svg-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: width,\n        height: height,\n        style: {\n          border: '1px solid black'\n        },\n        children: [points.map((point, i) => {\n          const [x, y, z] = rotatePoint(point, 'x');\n          const cameraPos = 500;\n          const projectedX = x * scale * cameraPos / (z * scale + cameraPos) + width / 2;\n          const projectedY = -y * scale * cameraPos / (z * scale + cameraPos) + height / 2;\n          const radius = safeRadius(z, scale, cameraPos);\n          return /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: projectedX,\n            cy: projectedY,\n            r: radius,\n            fill: colour\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this);\n        }), drawAxisLine('x'), drawAxisLine('y')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: \"x\",\n      onClick: handleClick,\n      children: \"Rotate X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: \"y\",\n      onClick: handleClick,\n      children: \"Rotate Y\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: \"z\",\n      onClick: handleClick,\n      children: \"Rotate Z\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n_s(VisualizationContainer, \"WMF1nlxGPxH8Zd3d8z8kwJ/4FkA=\");\n_c = VisualizationContainer;\nexport default VisualizationContainer;\nvar _c;\n$RefreshReg$(_c, \"VisualizationContainer\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","VisualizationContainer","_s","points","setPoints","loading","setLoading","error","setError","scale","setScale","colour","setColour","maxX","setMaxX","rotation","setRotation","x","y","z","width","height","get","then","response","data","catch","console","rotatePoint","point","type","rotatedX","rotatedY","rotatedZ","sin","Math","cos","handleClick","e","length","typeOfRot","target","value","prev","PI","rotatedPoints","map","post","newPoints","status","Error","handleWheel","deltaY","newScale","abs","safeRadius","cameraPos","denominator","children","fileName","_jsxFileName","lineNumber","columnNumber","drawAxisLine","axisType","sinX","cosX","sinY","cosY","sinZ","cosZ","startX","endX","yPos","zPos","projectedStartX","projectedEndX","x1","y1","x2","y2","stroke","startY","endY","xPos","projectedStartY","projectedEndY","onWheel","style","overflow","options","passive","id","border","i","projectedX","projectedY","radius","cx","cy","r","fill","onClick","_c","$RefreshReg$"],"sources":["/Users/simonastamkevicius/Desktop/Python Function Visualization/frontend/cartesian-frontend/src/components/VisualizationContainer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst VisualizationContainer = () => {\n  const [points, setPoints] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [scale, setScale] = useState(60);\n  const [colour, setColour] = useState(\"#002fa7\");\n  const [maxX, setMaxX] = useState(0);\n  const [rotation, setRotation] = useState({ x: 0, y: 0, z: 0 });\n\n  const width = 500;\n  const height = 500;\n\n  useEffect(() => {\n    axios\n      .get('http://localhost:8000/points')\n      .then((response) => {\n        setPoints(response.data.points);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error('Error fetching points:', error);\n        setError('Failed to fetch points');\n        setLoading(false);\n      });\n  }, []);\n\n  const rotatePoint = (point, type) => {\n    const [x, y, z] = point;\n    let rotatedX = x;\n    let rotatedY = y;\n    let rotatedZ = z;\n\n    const sin = Math.sin;\n    const cos = Math.cos;\n\n    if (type === 'x') {\n      // Rotate around X axis\n      rotatedY = y * cos(rotation.x) - z * sin(rotation.x);\n      rotatedZ = y * sin(rotation.x) + z * cos(rotation.x);\n    } else if (type === 'y') {\n      // Rotate around Y axis\n      rotatedX = x * cos(rotation.y) + z * sin(rotation.y);\n      rotatedZ = -x * sin(rotation.y) + z * cos(rotation.y);\n    } else if (type === 'z') {\n      // Rotate around Z axis\n      rotatedX = x * cos(rotation.z) - y * sin(rotation.z);\n      rotatedY = x * sin(rotation.z) + y * cos(rotation.z);\n    }\n\n    return [rotatedX, rotatedY, rotatedZ];\n  };\n\n  const handleClick = (e) => {\n    if (points.length > 0) {\n      const typeOfRot = e.target.value;\n\n      // Update the rotation angle based on the clicked axis\n      setRotation((prev) => ({\n        ...prev,\n        [typeOfRot]: prev[typeOfRot] + Math.PI / 6, // Rotate by 30 degrees each time\n      }));\n\n      // Rotate points and update the state\n      const rotatedPoints = points.map((point) => rotatePoint(point, typeOfRot));\n      setPoints(rotatedPoints);\n\n      // Send the rotated points to the server if needed\n      axios\n        .post('http://localhost:8000/rotate_points', {\n          type: typeOfRot,\n          newPoints: rotatedPoints,\n        })\n        .then((response) => {\n          if (response.status === 200) {\n            setPoints(response.data.rotatedPoints);\n          } else {\n            throw new Error('Failed to rotate points!');\n          }\n        })\n        .catch((error) => {\n          console.error('Error:', error);\n        });\n    }\n  };\n\n  const handleWheel = (e) => {\n    const { deltaY } = e;\n    const newScale =\n      deltaY > 0\n        ? scale - 0.075 * Math.abs(deltaY)\n        : scale + 0.075 * Math.abs(deltaY);\n\n    if (newScale > 1) {\n      setScale(newScale);\n    } else {\n      setScale(1);\n    }\n  };\n\n  const safeRadius = (z, scale, cameraPos) => {\n    const denominator = 1 + (z * scale) / cameraPos;\n\n    if (denominator <= 0.1) {\n      return 0;\n    }\n\n    return 1.5 * (1 / denominator);\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>{error}</p>;\n\n  const drawAxisLine = (axisType) => {\n    const sinX = Math.sin(rotation.x);\n    const cosX = Math.cos(rotation.x);\n    const sinY = Math.sin(rotation.y);\n    const cosY = Math.cos(rotation.y);\n    const sinZ = Math.sin(rotation.z);\n    const cosZ = Math.cos(rotation.z);\n\n    if (axisType === 'x') {\n      const startX = -3.5;\n      const endX = 3.5;\n      const yPos = 0;\n      const zPos = 500;\n      const projectedStartX = (startX * scale * zPos) / (zPos + startX * scale) + width / 2;\n      const projectedEndX = (endX * scale * zPos) / (zPos + endX * scale) + width / 2;\n      return (\n        <line\n          x1={projectedStartX}\n          y1={yPos + height / 2}\n          x2={projectedEndX}\n          y2={yPos + height / 2}\n          stroke=\"black\"\n        />\n      );\n    }\n    if (axisType === 'y') {\n      const startY = -3.5;\n      const endY = 3.5;\n      const xPos = 0;\n      const zPos = 500;\n      const projectedStartY = (startY * scale * zPos) / (zPos + startY * scale) + height / 2;\n      const projectedEndY = (endY * scale * zPos) / (zPos + endY * scale) + height / 2;\n      return (\n        <line\n          x1={xPos + width / 2}\n          y1={projectedStartY}\n          x2={xPos + width / 2}\n          y2={projectedEndY}\n          stroke=\"black\"\n        />\n      );\n    }\n  };\n\n  return (\n    <div onWheel={handleWheel} style={{ overflow: 'hidden' }} options={{ passive: false }}>\n      <h1>Visualization</h1>\n      <div id=\"svg-wrapper\">\n        <svg\n          width={width}\n          height={height}\n          style={{ border: '1px solid black' }}\n        >\n          {points.map((point, i) => {\n            const [x, y, z] = rotatePoint(point, 'x');\n            const cameraPos = 500;\n\n            const projectedX =\n              (x * scale * cameraPos) / (z * scale + cameraPos) + width / 2;\n            const projectedY =\n              (-y * scale * cameraPos) / (z * scale + cameraPos) + height / 2;\n\n            const radius = safeRadius(z, scale, cameraPos);\n\n            return (\n              <circle\n                key={i}\n                cx={projectedX}\n                cy={projectedY}\n                r={radius}\n                fill={colour}\n              />\n            );\n          })}\n          {drawAxisLine('x')}\n          {drawAxisLine('y')}\n        </svg>\n      </div>\n      <button value=\"x\" onClick={handleClick}>Rotate X</button>\n      <button value=\"y\" onClick={handleClick}>Rotate Y</button>\n      <button value=\"z\" onClick={handleClick}>Rotate Z</button>\n    </div>\n  );\n};\n\nexport default VisualizationContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}