{"ast":null,"code":"var _jsxFileName = \"/Users/simonastamkevicius/Desktop/Python Function Visualization/frontend/cartesian-frontend/src/components/VisualizationContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VisualizationContainer = () => {\n  _s();\n  const [points, setPoints] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [scale, setScale] = useState(60);\n  const [colour, setColour] = useState(\"#002fa7\");\n  const [xAxis, setXAxis] = useState([[3.5, 0, 0], [-3.5, 0, 0]]);\n  const [yAxis, setYAxis] = useState([[0, 3.5, 0], [0, -3.5, 0]]);\n  const [zAxis, setZAxis] = useState([[0, 0, 3.5], [0, 0, -3.5]]);\n  const width = 500;\n  const height = 500;\n  useEffect(() => {\n    axios.get('http://localhost:8000/points').then(response => {\n      setPoints(response.data.points);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching points:', error);\n      setError('Failed to fetch points');\n      setLoading(false);\n    });\n  }, []);\n  const handleClick = e => {\n    if (points.length > 0) {\n      const typeOfRot = e.target.value;\n      axios.post('http://localhost:8000/rotate_points', {\n        type: typeOfRot,\n        newPoints: points\n      }).then(response => {\n        if (response.status === 200) {\n          setPoints(response.data.rotatedPoints);\n\n          // Update axes after rotation\n          updateAxes(typeOfRot);\n        } else {\n          throw new Error('Failed to rotate points!');\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    }\n  };\n  const updateAxes = typeOfRot => {\n    // Update each axis using the rotation API\n    axios.post('http://localhost:8000/rotate_points', {\n      type: typeOfRot,\n      newPoints: xAxis\n    }).then(response => {\n      setXAxis(response.data.rotatedPoints);\n    });\n    axios.post('http://localhost:8000/rotate_points', {\n      type: typeOfRot,\n      newPoints: yAxis\n    }).then(response => {\n      setYAxis(response.data.rotatedPoints);\n    });\n    axios.post('http://localhost:8000/rotate_points', {\n      type: typeOfRot,\n      newPoints: zAxis\n    }).then(response => {\n      setZAxis(response.data.rotatedPoints);\n    });\n  };\n  const projectPoint = ([x, y, z], cameraPos = 500) => {\n    return [x * scale * cameraPos / (z * scale + cameraPos) + width / 2, -y * scale * cameraPos / (z * scale + cameraPos) + height / 2];\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"svg-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: width,\n        height: height,\n        style: {\n          border: '1px solid black'\n        },\n        children: [points.map((point, i) => {\n          const [x, y, z] = point;\n          const [projectedX, projectedY] = projectPoint([x, y, z]);\n          const radius = 3;\n          return /*#__PURE__*/_jsxDEV(\"circle\", {\n            cx: projectedX,\n            cy: projectedY,\n            r: radius,\n            fill: colour\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this);\n        }), [xAxis, yAxis, zAxis].map((axis, index) => {\n          const [start, end] = axis;\n          const [x1, y1] = projectPoint(start);\n          const [x2, y2] = projectPoint(end);\n          const colors = [\"red\", \"green\", \"blue\"]; // X, Y, Z axis colors\n\n          return /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: x1,\n            y1: y1,\n            x2: x2,\n            y2: y2,\n            stroke: colors[index],\n            strokeWidth: 2\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: \"x\",\n      onClick: handleClick,\n      children: \"Rotate X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: \"y\",\n      onClick: handleClick,\n      children: \"Rotate Y\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      value: \"z\",\n      onClick: handleClick,\n      children: \"Rotate Z\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(VisualizationContainer, \"iLewoAlH7fjzyMVz4wN0vn+kGbM=\");\n_c = VisualizationContainer;\nexport default VisualizationContainer;\nvar _c;\n$RefreshReg$(_c, \"VisualizationContainer\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","VisualizationContainer","_s","points","setPoints","loading","setLoading","error","setError","scale","setScale","colour","setColour","xAxis","setXAxis","yAxis","setYAxis","zAxis","setZAxis","width","height","get","then","response","data","catch","console","handleClick","e","length","typeOfRot","target","value","post","type","newPoints","status","rotatedPoints","updateAxes","Error","projectPoint","x","y","z","cameraPos","children","fileName","_jsxFileName","lineNumber","columnNumber","style","overflow","id","border","map","point","i","projectedX","projectedY","radius","cx","cy","r","fill","axis","index","start","end","x1","y1","x2","y2","colors","stroke","strokeWidth","onClick","_c","$RefreshReg$"],"sources":["/Users/simonastamkevicius/Desktop/Python Function Visualization/frontend/cartesian-frontend/src/components/VisualizationContainer.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst VisualizationContainer = () => {\n  const [points, setPoints] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [scale, setScale] = useState(60);\n  const [colour, setColour] = useState(\"#002fa7\");\n\n  const [xAxis, setXAxis] = useState([[3.5, 0, 0], [-3.5, 0, 0]]);\n  const [yAxis, setYAxis] = useState([[0, 3.5, 0], [0, -3.5, 0]]);\n  const [zAxis, setZAxis] = useState([[0, 0, 3.5], [0, 0, -3.5]]);\n\n  const width = 500;\n  const height = 500;\n\n  useEffect(() => {\n    axios\n      .get('http://localhost:8000/points')\n      .then((response) => {\n        setPoints(response.data.points);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error('Error fetching points:', error);\n        setError('Failed to fetch points');\n        setLoading(false);\n      });\n  }, []);\n\n  const handleClick = (e) => {\n    if (points.length > 0) {\n      const typeOfRot = e.target.value;\n      axios\n        .post('http://localhost:8000/rotate_points', {\n          type: typeOfRot,\n          newPoints: points,\n        })\n        .then((response) => {\n          if (response.status === 200) {\n            setPoints(response.data.rotatedPoints);\n\n            // Update axes after rotation\n            updateAxes(typeOfRot);\n          } else {\n            throw new Error('Failed to rotate points!');\n          }\n        })\n        .catch((error) => {\n          console.error('Error:', error);\n        });\n    }\n  };\n\n  const updateAxes = (typeOfRot) => {\n    // Update each axis using the rotation API\n    axios.post('http://localhost:8000/rotate_points', {\n      type: typeOfRot,\n      newPoints: xAxis,\n    }).then((response) => {\n      setXAxis(response.data.rotatedPoints);\n    });\n\n    axios.post('http://localhost:8000/rotate_points', {\n      type: typeOfRot,\n      newPoints: yAxis,\n    }).then((response) => {\n      setYAxis(response.data.rotatedPoints);\n    });\n\n    axios.post('http://localhost:8000/rotate_points', {\n      type: typeOfRot,\n      newPoints: zAxis,\n    }).then((response) => {\n      setZAxis(response.data.rotatedPoints);\n    });\n  };\n\n  const projectPoint = ([x, y, z], cameraPos = 500) => {\n    return [\n      (x * scale * cameraPos) / (z * scale + cameraPos) + width / 2,\n      (-y * scale * cameraPos) / (z * scale + cameraPos) + height / 2,\n    ];\n  };\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>{error}</p>;\n\n  return (\n    <div style={{ overflow: 'hidden' }}>\n      <h1>Visualization</h1>\n      <div id=\"svg-wrapper\">\n        <svg\n          width={width}\n          height={height}\n          style={{ border: '1px solid black' }}\n        >\n          {/* Render points */}\n          {points.map((point, i) => {\n            const [x, y, z] = point;\n            const [projectedX, projectedY] = projectPoint([x, y, z]);\n            const radius = 3;\n\n            return (\n              <circle\n                key={i}\n                cx={projectedX}\n                cy={projectedY}\n                r={radius}\n                fill={colour}\n              />\n            );\n          })}\n\n          {/* Render axes */}\n          {[xAxis, yAxis, zAxis].map((axis, index) => {\n            const [start, end] = axis;\n            const [x1, y1] = projectPoint(start);\n            const [x2, y2] = projectPoint(end);\n            const colors = [\"red\", \"green\", \"blue\"]; // X, Y, Z axis colors\n\n            return (\n              <line\n                key={index}\n                x1={x1}\n                y1={y1}\n                x2={x2}\n                y2={y2}\n                stroke={colors[index]}\n                strokeWidth={2}\n              />\n            );\n          })}\n        </svg>\n      </div>\n      <button value=\"x\" onClick={handleClick}>Rotate X</button>\n      <button value=\"y\" onClick={handleClick}>Rotate Y</button>\n      <button value=\"z\" onClick={handleClick}>Rotate Z</button>\n    </div>\n  );\n};\n\nexport default VisualizationContainer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}